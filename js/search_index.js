var search_data = {"index":{"searchIndex":["actioncontroller","testcase","actiondispatch","integrationtest","actionmailer","testcase","actionview","testcase","activejob","testcase","activesupport","testcase","activerecord","minitest","rails","constantlookup","expectations","activejob","railtie","rake","rails","generators","testcase","assert_difference()","assert_difference()","assert_difference()","assert_dom_equal()","assert_dom_equal()","assert_dom_not_equal()","assert_dom_not_equal()","assert_enqueued_jobs()","assert_enqueued_with()","assert_generates()","assert_generates()","assert_no_difference()","assert_no_difference()","assert_no_difference()","assert_no_enqueued_jobs()","assert_no_performed_jobs()","assert_performed_jobs()","assert_performed_with()","assert_recognizes()","assert_recognizes()","assert_redirected_to()","assert_redirected_to()","assert_response()","assert_response()","assert_routing()","assert_routing()","assert_select()","assert_select()","assert_select_email()","assert_select_email()","assert_select_encoded()","assert_select_encoded()","controller_tests?()","determine_default_controller_class()","determine_default_generator()","determine_default_helper_class()","determine_default_mailer()","must_change()","must_dom_equal()","must_enqueue_jobs()","must_enqueue_with()","must_perform_jobs()","must_perform_with()","must_redirect_to()","must_respond_with()","must_route_for()","must_route_from()","must_select()","must_select_email()","must_select_encoded()","refute_difference()","refute_difference()","refute_difference()","refute_dom_equal()","refute_dom_equal()","wont_change()","wont_dom_equal()","wont_enqueue_jobs()","wont_perform_jobs()","changelog","manifest","readme"],"longSearchIndex":["actioncontroller","actioncontroller::testcase","actiondispatch","actiondispatch::integrationtest","actionmailer","actionmailer::testcase","actionview","actionview::testcase","activejob","activejob::testcase","activesupport","activesupport::testcase","activesupport::testcase::activerecord","minitest","minitest::rails","minitest::rails::constantlookup","minitest::rails::expectations","minitest::rails::expectations::activejob","minitest::rails::railtie","minitest::rails::railtie::rake","rails","rails::generators","rails::generators::testcase","actiondispatch::integrationtest#assert_difference()","actionview::testcase#assert_difference()","activesupport::testcase#assert_difference()","actiondispatch::integrationtest#assert_dom_equal()","actionview::testcase#assert_dom_equal()","actiondispatch::integrationtest#assert_dom_not_equal()","actionview::testcase#assert_dom_not_equal()","activejob::testcase#assert_enqueued_jobs()","activejob::testcase#assert_enqueued_with()","actiondispatch::integrationtest#assert_generates()","actionview::testcase#assert_generates()","actiondispatch::integrationtest#assert_no_difference()","actionview::testcase#assert_no_difference()","activesupport::testcase#assert_no_difference()","activejob::testcase#assert_no_enqueued_jobs()","activejob::testcase#assert_no_performed_jobs()","activejob::testcase#assert_performed_jobs()","activejob::testcase#assert_performed_with()","actiondispatch::integrationtest#assert_recognizes()","actionview::testcase#assert_recognizes()","actiondispatch::integrationtest#assert_redirected_to()","actionview::testcase#assert_redirected_to()","actiondispatch::integrationtest#assert_response()","actionview::testcase#assert_response()","actiondispatch::integrationtest#assert_routing()","actionview::testcase#assert_routing()","actiondispatch::integrationtest#assert_select()","actionview::testcase#assert_select()","actiondispatch::integrationtest#assert_select_email()","actionview::testcase#assert_select_email()","actiondispatch::integrationtest#assert_select_encoded()","actionview::testcase#assert_select_encoded()","minitest::rails::controller_tests?()","actioncontroller::testcase::determine_default_controller_class()","rails::generators::testcase::determine_default_generator()","actionview::testcase::determine_default_helper_class()","actionmailer::testcase::determine_default_mailer()","minitest::rails::expectations#must_change()","minitest::rails::expectations#must_dom_equal()","minitest::rails::expectations#must_enqueue_jobs()","minitest::rails::expectations#must_enqueue_with()","minitest::rails::expectations#must_perform_jobs()","minitest::rails::expectations#must_perform_with()","minitest::rails::expectations#must_redirect_to()","minitest::rails::expectations#must_respond_with()","minitest::rails::expectations#must_route_for()","minitest::rails::expectations#must_route_from()","minitest::rails::expectations#must_select()","minitest::rails::expectations#must_select_email()","minitest::rails::expectations#must_select_encoded()","actiondispatch::integrationtest#refute_difference()","actionview::testcase#refute_difference()","activesupport::testcase#refute_difference()","actiondispatch::integrationtest#refute_dom_equal()","actionview::testcase#refute_dom_equal()","minitest::rails::expectations#wont_change()","minitest::rails::expectations#wont_dom_equal()","minitest::rails::expectations#wont_enqueue_jobs()","minitest::rails::expectations#wont_perform_jobs()","","",""],"info":[["ActionController","","ActionController.html","",""],["ActionController::TestCase","","ActionController/TestCase.html","",""],["ActionDispatch","","ActionDispatch.html","",""],["ActionDispatch::IntegrationTest","","ActionDispatch/IntegrationTest.html","",""],["ActionMailer","","ActionMailer.html","",""],["ActionMailer::TestCase","","ActionMailer/TestCase.html","",""],["ActionView","","ActionView.html","",""],["ActionView::TestCase","","ActionView/TestCase.html","",""],["ActiveJob","","ActiveJob.html","",""],["ActiveJob::TestCase","","ActiveJob/TestCase.html","",""],["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["ActiveSupport::TestCase::ActiveRecord","","ActiveSupport/TestCase/ActiveRecord.html","",""],["Minitest","","Minitest.html","","<p>Do we support old school controller tests?\n"],["Minitest::Rails","","Minitest/Rails.html","",""],["Minitest::Rails::ConstantLookup","","Minitest/Rails/ConstantLookup.html","","<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre>describe WidgetsController, ...</pre>\n"],["Minitest::Rails::Expectations","","Minitest/Rails/Expectations.html","",""],["Minitest::Rails::Expectations::ActiveJob","","Minitest/Rails/Expectations/ActiveJob.html","","<p>This exists as a module to allow easy mixing into classes other than\nActiveJob::TestCase where you might …\n"],["Minitest::Rails::Railtie","","Minitest/Rails/Railtie.html","",""],["Minitest::Rails::Railtie::Rake","","Minitest/Rails/Railtie/Rake.html","",""],["Rails","","Rails.html","",""],["Rails::Generators","","Rails/Generators.html","",""],["Rails::Generators::TestCase","","Rails/Generators/TestCase.html","",""],["assert_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as\na result of what is evaluated. …\n"],["assert_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as\na result of what is evaluated. …\n"],["assert_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_difference","","<p>Checks the numeric difference between the return value of an expression as\na result of what is evaluated. …\n"],["assert_dom_equal","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_dom_equal","","<p>Checks that two HTML strings are equivalent. That they contain the same\nelements and attributes with …\n"],["assert_dom_equal","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_dom_equal","","<p>Checks that two HTML strings are equivalent. That they contain the same\nelements and attributes with …\n"],["assert_dom_not_equal","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_dom_not_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain\nthe same elements and attributes …\n"],["assert_dom_not_equal","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_dom_not_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain\nthe same elements and attributes …\n"],["assert_enqueued_jobs","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_enqueued_jobs","","<p>Asserts that the number of enqueued jobs matches the given number.\n\n<pre>def test_jobs\n  assert_enqueued_jobs ...</pre>\n"],["assert_enqueued_with","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_enqueued_with","","<p>Asserts that the job passed in the block has been enqueued with the given\narguments.\n\n<pre>def test_assert_enqueued_with ...</pre>\n"],["assert_generates","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_generates","","<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["assert_generates","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_generates","","<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["assert_no_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["assert_no_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["assert_no_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_no_difference","","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["assert_no_enqueued_jobs","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_no_enqueued_jobs","","<p>Asserts that no jobs have been enqueued.\n\n<pre>def test_jobs\n  assert_no_enqueued_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...</pre>\n"],["assert_no_performed_jobs","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_no_performed_jobs","","<p>Asserts that no jobs have been performed.\n\n<pre>def test_jobs\n  assert_no_performed_jobs\n\n  perform_enqueued_jobs ...</pre>\n"],["assert_performed_jobs","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_performed_jobs","","<p>Asserts that the number of performed jobs matches the given number. If no\nblock is passed, <code>perform_enqueued_jobs</code> …\n"],["assert_performed_with","ActiveJob::TestCase","ActiveJob/TestCase.html#method-i-assert_performed_with","","<p>Asserts that the job passed in the block has been performed with the given\narguments.\n\n<pre>def test_assert_performed_with ...</pre>\n"],["assert_recognizes","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_recognizes","","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_recognizes","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_recognizes","","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_redirected_to","","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_redirected_to","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_redirected_to","","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_response","","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_response","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_response","","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_routing","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_routing","","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_routing","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_routing","","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_select","","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_select","","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_select_email","","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_email","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_select_email","","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-assert_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["assert_select_encoded","ActionView::TestCase","ActionView/TestCase.html#method-i-assert_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["controller_tests?","Minitest::Rails","Minitest/Rails.html#method-c-controller_tests-3F","()",""],["determine_default_controller_class","ActionController::TestCase","ActionController/TestCase.html#method-c-determine_default_controller_class","(name)","<p>Resolve the controller from the test name when using the spec DSL\n"],["determine_default_generator","Rails::Generators::TestCase","Rails/Generators/TestCase.html#method-c-determine_default_generator","(name)",""],["determine_default_helper_class","ActionView::TestCase","ActionView/TestCase.html#method-c-determine_default_helper_class","(name)","<p>Resolve the helper or view from the test name when using the spec DSL\n"],["determine_default_mailer","ActionMailer::TestCase","ActionMailer/TestCase.html#method-c-determine_default_mailer","(name)","<p>Resolve the mailer from the test name when using the spec DSL\n"],["must_change","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_change","expression, difference = 1, message = nil","<p>Checks the numeric difference between the return value of an expression as\na result of what is evaluated. …\n"],["must_dom_equal","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_dom_equal","expected, message = nil","<p>Checks that two HTML strings are equivalent. That they contain the same\nelements and attributes with …\n"],["must_enqueue_jobs","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_enqueue_jobs","","<p>Expects that the number of enqueued jobs matches the given number.\n\n<pre>def test_jobs\n  must_enqueue_jobs 0 ...</pre>\n"],["must_enqueue_with","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_enqueue_with","","<p>Expects that the job passed in the block has been enqueued with the given\narguments.\n\n<pre>def test_must_enqueue_with ...</pre>\n"],["must_perform_jobs","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_perform_jobs","","<p>Expects that the number of performed jobs matches the given number. If no\nblock is passed, <code>perform_enqueued_jobs</code> …\n"],["must_perform_with","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_perform_with","","<p>Expects that the job passed in the block has been performed with the given\narguments.\n\n<pre>def test_must_perform_with ...</pre>\n"],["must_redirect_to","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_redirect_to","","<p>Expects that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["must_respond_with","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_respond_with","","<p>Expects that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["must_route_for","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_route_for","","<p>Expects that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["must_route_from","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_route_from","","<p>Expects that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["must_select","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_select","","<p>An expectation that selects elements and makes one or more equality tests.\n<p>If the first argument is an …\n"],["must_select_email","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_select_email","","<p>Extracts the body of an email and runs nested expectations on it.\n<p>You must enable deliveries for this …\n"],["must_select_encoded","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-must_select_encoded","","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested expectation on it.\n<p>You typically …\n"],["refute_difference","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["refute_difference","ActionView::TestCase","ActionView/TestCase.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["refute_difference","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-refute_difference","","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["refute_dom_equal","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-refute_dom_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain\nthe same elements and attributes …\n"],["refute_dom_equal","ActionView::TestCase","ActionView/TestCase.html#method-i-refute_dom_equal","","<p>Checks that two HTML strings are not equivalent. That they do not contain\nthe same elements and attributes …\n"],["wont_change","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_change","expression, message = nil","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["wont_dom_equal","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_dom_equal","expected, message = nil","<p>Checks that the numeric result of evaluating an expression is not changed\nbefore and after invoking. …\n"],["wont_enqueue_jobs","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_enqueue_jobs","","<p>Expects that no jobs have been enqueued.\n\n<pre>def test_jobs\n  wont_enqueue_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...</pre>\n"],["wont_perform_jobs","Minitest::Rails::Expectations","Minitest/Rails/Expectations.html#method-i-wont_perform_jobs","","<p>Expects that no jobs have been performed.\n\n<pre>def test_jobs\n  wont_perform_jobs\n\n  perform_enqueued_jobs do ...</pre>\n"],["CHANGELOG","","CHANGELOG_rdoc.html","","<p>3.0.0 / 2016-07-01\n<p>Support Rails 5\n<p>The spec DSL is now default.\n"],["Manifest","","Manifest_txt.html","","<p>.autotest .gemtest .travis.yml CHANGELOG.rdoc Gemfile LICENSE Manifest.txt\nREADME.rdoc Rakefile gemfiles/5.0.gemfile …\n"],["README","","README_rdoc.html","","<p>minitest-rails\n<p>Minitest integration for Rails 5\n<p><img src=“https://secure.travis-ci.org/blowmage/minitest-rails.png” …\n"]]}}